---
import { profile, siteInfo, analytics } from '../../settings'
import { getLangFromUrl } from '../../i18n/utils'

const { fullName } = profile
const currentLang = getLangFromUrl(Astro.url)

const buildTime = import.meta.env.BUILD_TIME || siteInfo.lastUpdated

const copyright = {
  zh: `最后更新时间：${buildTime}`,
  en: `Last updated: ${buildTime}`,
  ja: `最終更新：${buildTime}`
}

const visitText = {
  zh: '访问量',
  en: 'Visits',
  ja: 'アクセス数'
}
---

<div class="floating-widget" id="floating-widget">
  <div class="floating-widget-content">
    <div class="floating-widget-item">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <span class="text-xs widget-text">{copyright[currentLang as keyof typeof copyright] || copyright.en}</span>
    </div>
    <div class="floating-widget-item">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
      </svg>
      <span class="text-xs widget-text">{visitText[currentLang as keyof typeof visitText] || visitText.en}:</span>
      <span class="text-xs font-medium widget-text" id="counter-display">加载中...</span>
    </div>
  </div>
</div>

<style>
  .floating-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 12px 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    max-width: 280px;
    transform: translateX(0);
  }

  .floating-widget.scrolling {
    transform: translateX(calc(100% - 10px));
    padding: 12px 6px;
  }

  .floating-widget.scrolling .widget-text {
    opacity: 0;
    transform: translateX(20px);
  }

  .floating-widget:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  }

  .floating-widget:hover.scrolling {
    transform: translateY(-2px) translateX(0);
  }

  .floating-widget-content {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .floating-widget-item {
    display: flex;
    align-items: center;
    gap: 6px;
    color: #666;
    font-size: 12px;
  }

  .widget-text {
    transition: all 0.3s ease;
    opacity: 1;
    transform: translateX(0);
  }

  .floating-widget-item svg {
    flex-shrink: 0;
    color: #888;
  }

  #counter-display {
    font-weight: 500;
    color: var(--color-primary, #0066cc);
  }

  /* 深色模式适配 */
  @media (prefers-color-scheme: dark) {
    .floating-widget {
      background: rgba(30, 30, 30, 0.95);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .floating-widget-item {
      color: #ccc;
    }
    
    .floating-widget-item svg {
      color: #aaa;
    }
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .floating-widget {
      bottom: 15px;
      right: 15px;
      padding: 10px 12px;
      max-width: 240px;
    }
    
    .floating-widget-item {
      font-size: 11px;
    }
  }
</style>

<script define:vars={{ analytics }}>
  const CACHE_KEY = 'counterapi_cache';
  const CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存

  function getCachedData() {
    const cached = localStorage.getItem(CACHE_KEY);
    if (cached) {
      const data = JSON.parse(cached);
      if (Date.now() - data.timestamp < CACHE_DURATION) {
        return data.count;
      }
    }
    return null;
  }

  function setCachedData(count) {
    const data = {
      count: count,
      timestamp: Date.now()
    };
    localStorage.setItem(CACHE_KEY, JSON.stringify(data));
  }

  async function updateCounter() {
    if (!analytics.counterapi.enabled) return;
    
    const counterDisplay = document.getElementById('counter-display');
    if (!counterDisplay) return;

    // 首先尝试使用缓存数据
    const cachedCount = getCachedData();
    if (cachedCount !== null) {
      counterDisplay.textContent = cachedCount.toString();
      return;
    }
    
    try {
      const response = await fetch(`https://api.counterapi.dev/v1/${analytics.counterapi.workspace}/${analytics.counterapi.counter}/up`, {
        method: 'GET'
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.count !== undefined) {
          counterDisplay.textContent = data.count.toString();
          setCachedData(data.count);
        }
      } else {
        console.error('Counter API request failed:', response.status);
        counterDisplay.textContent = '--';
      }
    } catch (error) {
      console.error('Counter API error:', error);
      counterDisplay.textContent = '--';
    }
  }

  // 滚动处理
  let scrollTimer = null;
  let isScrolling = false;
  let isHovering = false;

  function handleScroll() {
    const widget = document.getElementById('floating-widget');
    if (!widget) return;

    // 如果鼠标悬停在浮窗上，不执行收起
    if (isHovering) return;

    // 添加滚动状态
    if (!isScrolling) {
      isScrolling = true;
      widget.classList.add('scrolling');
    }

    // 清除之前的定时器
    if (scrollTimer) {
      clearTimeout(scrollTimer);
    }

    // 设置新的定时器，停止滚动后恢复
    scrollTimer = setTimeout(() => {
      isScrolling = false;
      widget.classList.remove('scrolling');
    }, 1000);
  }

  function handleMouseEnter() {
    isHovering = true;
    const widget = document.getElementById('floating-widget');
    if (widget) {
      widget.classList.remove('scrolling');
    }
  }

  function handleMouseLeave() {
    isHovering = false;
  }

  // 页面加载时更新计数器
  document.addEventListener('DOMContentLoaded', () => {
    updateCounter();
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    const widget = document.getElementById('floating-widget');
    if (widget) {
      widget.addEventListener('mouseenter', handleMouseEnter);
      widget.addEventListener('mouseleave', handleMouseLeave);
    }
  });
  
  // Astro 页面切换时也更新计数器（处理水合问题）
  document.addEventListener('astro:page-load', () => {
    updateCounter();
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    const widget = document.getElementById('floating-widget');
    if (widget) {
      widget.addEventListener('mouseenter', handleMouseEnter);
      widget.addEventListener('mouseleave', handleMouseLeave);
    }
  });
</script>
